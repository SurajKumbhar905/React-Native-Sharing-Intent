{"version":3,"file":"codegen.js","names":["_kleur","_interopRequireDefault","require","_patchCodegen","_spawn","_fsExtra","_path","_del","e","__esModule","default","build","root","report","packageJsonPath","path","resolve","packageJson","fs","readJson","codegenIosPath","codegenConfig","outputDir","ios","info","kleur","blue","relative","del","codegenAndroidPath","android","spawn","stdio","patchCodegen","success","stdout","error","toString","message","Error"],"sources":["../../src/targets/codegen.ts"],"sourcesContent":["import kleur from 'kleur';\nimport type { Input } from '../types';\nimport { patchCodegen } from '../utils/patchCodegen';\nimport { spawn } from '../utils/spawn';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport del from 'del';\n\ntype Options = Input;\n\nexport default async function build({ root, report }: Options) {\n  const packageJsonPath = path.resolve(root, 'package.json');\n  const packageJson = await fs.readJson(packageJsonPath);\n\n  const codegenIosPath = packageJson.codegenConfig?.outputDir?.ios;\n  if (codegenIosPath != null) {\n    report.info(\n      `Cleaning up previous iOS codegen native code at ${kleur.blue(\n        path.relative(root, codegenIosPath)\n      )}`\n    );\n    await del([codegenIosPath]);\n  }\n\n  const codegenAndroidPath = packageJson.codegenConfig?.outputDir?.android;\n  if (codegenAndroidPath != null) {\n    report.info(\n      `Cleaning up previous Android codegen native code at ${kleur.blue(\n        path.relative(root, codegenAndroidPath)\n      )}`\n    );\n    await del([codegenAndroidPath]);\n  }\n\n  try {\n    await spawn('npx', ['react-native', 'codegen'], {\n      stdio: 'ignore',\n    });\n\n    patchCodegen(root, packageJson, report);\n\n    report.success('Generated native code with codegen');\n  } catch (e: unknown) {\n    if (e != null && typeof e === 'object') {\n      if ('stdout' in e && e.stdout != null) {\n        report.error(\n          `Errors found while generating codegen files:\\n${e.stdout.toString()}`\n        );\n      } else if ('message' in e && typeof e.message === 'string') {\n        report.error(e.message);\n      } else {\n        throw e;\n      }\n    } else {\n      throw e;\n    }\n\n    throw new Error('Failed generate the codegen files.');\n  }\n}\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AAEA,IAAAC,aAAA,GAAAD,OAAA;AACA,IAAAE,MAAA,GAAAF,OAAA;AACA,IAAAG,QAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,KAAA,GAAAL,sBAAA,CAAAC,OAAA;AACA,IAAAK,IAAA,GAAAN,sBAAA,CAAAC,OAAA;AAAsB,SAAAD,uBAAAO,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAIP,eAAeG,KAAKA,CAAC;EAAEC,IAAI;EAAEC;AAAgB,CAAC,EAAE;EAC7D,MAAMC,eAAe,GAAGC,aAAI,CAACC,OAAO,CAACJ,IAAI,EAAE,cAAc,CAAC;EAC1D,MAAMK,WAAW,GAAG,MAAMC,gBAAE,CAACC,QAAQ,CAACL,eAAe,CAAC;EAEtD,MAAMM,cAAc,GAAGH,WAAW,CAACI,aAAa,EAAEC,SAAS,EAAEC,GAAG;EAChE,IAAIH,cAAc,IAAI,IAAI,EAAE;IAC1BP,MAAM,CAACW,IAAI,CACT,mDAAmDC,cAAK,CAACC,IAAI,CAC3DX,aAAI,CAACY,QAAQ,CAACf,IAAI,EAAEQ,cAAc,CACpC,CAAC,EACH,CAAC;IACD,MAAM,IAAAQ,YAAG,EAAC,CAACR,cAAc,CAAC,CAAC;EAC7B;EAEA,MAAMS,kBAAkB,GAAGZ,WAAW,CAACI,aAAa,EAAEC,SAAS,EAAEQ,OAAO;EACxE,IAAID,kBAAkB,IAAI,IAAI,EAAE;IAC9BhB,MAAM,CAACW,IAAI,CACT,uDAAuDC,cAAK,CAACC,IAAI,CAC/DX,aAAI,CAACY,QAAQ,CAACf,IAAI,EAAEiB,kBAAkB,CACxC,CAAC,EACH,CAAC;IACD,MAAM,IAAAD,YAAG,EAAC,CAACC,kBAAkB,CAAC,CAAC;EACjC;EAEA,IAAI;IACF,MAAM,IAAAE,YAAK,EAAC,KAAK,EAAE,CAAC,cAAc,EAAE,SAAS,CAAC,EAAE;MAC9CC,KAAK,EAAE;IACT,CAAC,CAAC;IAEF,IAAAC,0BAAY,EAACrB,IAAI,EAAEK,WAAW,EAAEJ,MAAM,CAAC;IAEvCA,MAAM,CAACqB,OAAO,CAAC,oCAAoC,CAAC;EACtD,CAAC,CAAC,OAAO1B,CAAU,EAAE;IACnB,IAAIA,CAAC,IAAI,IAAI,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAAE;MACtC,IAAI,QAAQ,IAAIA,CAAC,IAAIA,CAAC,CAAC2B,MAAM,IAAI,IAAI,EAAE;QACrCtB,MAAM,CAACuB,KAAK,CACV,iDAAiD5B,CAAC,CAAC2B,MAAM,CAACE,QAAQ,CAAC,CAAC,EACtE,CAAC;MACH,CAAC,MAAM,IAAI,SAAS,IAAI7B,CAAC,IAAI,OAAOA,CAAC,CAAC8B,OAAO,KAAK,QAAQ,EAAE;QAC1DzB,MAAM,CAACuB,KAAK,CAAC5B,CAAC,CAAC8B,OAAO,CAAC;MACzB,CAAC,MAAM;QACL,MAAM9B,CAAC;MACT;IACF,CAAC,MAAM;MACL,MAAMA,CAAC;IACT;IAEA,MAAM,IAAI+B,KAAK,CAAC,oCAAoC,CAAC;EACvD;AACF","ignoreList":[]}